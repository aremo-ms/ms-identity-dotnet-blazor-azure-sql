@page "/fetchdata"

@using ms_identity_dotnet_blazor_azure_sql.AAD
@using ms_identity_dotnet_blazor_azure_sql.Data
@inject WeatherForecastService ForecastService
@inject UserAADService UserAADService
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<h1>Weather forecast</h1>
<h4><strong>@_greetingsMessage</strong></h4>

<p>This component demonstrates fetching data from a service that is connected to SQL database.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private string _loggedUser;
    private string _greetingsMessage;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();

        _loggedUser = await UserAADService.GetDatabaseLoggedUser(authstate);

        if (_loggedUser == "N/A")
            _greetingsMessage = "Please Log Out of the current user and re-login.";
        else
        {
            _greetingsMessage = $"The user logged into SQL Database is {_loggedUser}";

            forecasts = await ForecastService.GetForecastAsync(DateTime.Now, authstate);
        }
    }
}
